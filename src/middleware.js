// src/middleware.js
import { NextResponse } from "next/server";
import { getToken } from "next-auth/jwt";

export async function middleware(req) {
  const { pathname } = req.nextUrl;

  // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ª–æ–≥–∏–Ω–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (["/login", "/api/auth"].some((path) => pathname.startsWith(path))) {
    return NextResponse.next();
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });

  // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω –∏–ª–∏ 401 –¥–ª—è API
  if (!token?.login) {
    return pathname.startsWith("/api")
      ? new NextResponse(
          JSON.stringify({ error: "Unauthorized" }),
          { status: 401, headers: { "Content-Type": "application/json" } }
        )
      : NextResponse.redirect(new URL("/login", req.url));
  }

  // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è /admin
  if (pathname.startsWith("/admin")) {
    const tags = token.tags || [];
    if (!tags.includes("admin")) {
      // –ï—Å–ª–∏ API ‚Üí 403
      if (pathname.startsWith("/api")) {
        return new NextResponse(
          JSON.stringify({ error: "Forbidden" }),
          { status: 403, headers: { "Content-Type": "application/json" } }
        );
      }
      // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ permission-denied
      return NextResponse.redirect(new URL("/permission-denied", req.url));
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/((?!_next/static|_next/image|favicon.ico).*)"], // –≤—Å—ë –∫—Ä–æ–º–µ —Å—Ç–∞—Ç–∏–∫–∏
};
